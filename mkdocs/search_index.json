{
    "docs": [
        {
            "location": "/", 
            "text": "AverageShiftedHistograms.jl\n\n\nAn Average Shifted Histogram (ASH) estimator is essentially a kernel density calculated\nwith a fine-partition histogram.\n\n\n\n\nUnivariate Usage\n\n\nThe main function exported by AverageShiftedHistograms is \nash\n.\n\n\nash\n(\nx\n,\n \nrng\n \n=\n \nextendrange\n(\nx\n);\n \nm\n \n=\n \n5\n,\n \nkernel\n \n=\n \nKernels\n.\nbiweight\n,\n \nwarnout\n \n=\n \ntrue\n)\n\n\n\n\n\n\n\n\nx\n\n\nSample for which you want to calculate a density\n\n\n\n\n\n\nrng = extendrange(x)\n\n\nRange of points to calculate the density at (partition of the histogram)\n\n\nBy default, uses \nextendrange\n to extend the maximum/minimum of \nx\n\n\n\n\n\n\nm = 5\n\n\nSmoothing parameter (number of adjacent bins to smooth over)\n\n\n\n\n\n\nkernel = Kernels.biweight\n\n\nSmoothing kernel to use.  Kernels provided by AverageShiftedHistograms are within\na \nKernels\n module to help avoid potential name conflicts.  \n\n\nUsers can provide their own function to use.  The function should be strictly\n nonnegative, symmetric around 0, but not necessarily integrate to 1\n\n\ngaussian(u) = exp(-0.5 * u ^ 2)\n (already in \nKernels\n) is a valid kernel.\n\n\n\n\n\n\n\n\n\n\nwarnout = true\n\n\nprint a warning if the estimated density is nonzero outside of \nrng\n\n\n\n\n\n\n\n\n\n\nUnivariate Toy Example\n\n\nusing\n \nAverageShiftedHistograms\n\n\nusing\n \nPlots\n;\n \ngr\n()\n\n\n\ny\n \n=\n \nrandn\n(\n100_000\n)\n\n\n\no\n \n=\n \nash\n(\ny\n,\n \n-\n5\n:\n.\n1\n:\n5\n)\n\n\n\nplot\n(\no\n)\n\n\n\n\n\n\n\n\n# BEWARE OVERSMOOTHING!\n\n\no\n \n=\n \nash\n(\ny\n,\n \n-\n5\n:\n.\n1\n:\n5\n,\n \nm\n \n=\n \n20\n)\n\n\nplot\n(\no\n)\n\n\n\n\n\n\n\n\n\n\nBivariate Usage\n\n\nash\n(\nx\n,\n \ny\n;\n \nkw\n...\n)\n\n\nash\n(\nx\n,\n \ny\n,\n \nrngx\n,\n \nrngy\n;\n \nkw\n...\n)\n\n\n\n\n\n\n\n\nx\n, \ny\n\n\nThe bivariate data series (each is an AbstractVector)\n\n\n\n\n\n\nrngx\n, \nrngy\n\n\nThe histogram partition for \nx\n and \ny\n, respectively\n\n\n\n\n\n\nkw...\n Keyword arguments are\n\n\nmx = 5\n, \nmy = 5\n\n\nSmoothing parameters for \nx\n and \ny\n\n\n\n\n\n\nkernelx = Kernels.biweight\n, \nkernely = Kernels.biweight\n\n\nSmoothing kernels for \nx\n and \ny\n\n\n\n\n\n\nwarnout = true\n\n\nPrint warning if density is nonzero on the edge of \nrngx\n or \nrngy\n\n\n\n\n\n\n\n\n\n\n\n\nBivariate Toy Example\n\n\nusing\n \nAverageShiftedHistograms\n\n\nusing\n \nPlots\n;\n \npyplot\n()\n\n\n\nx\n \n=\n \nrandn\n(\n10_000\n)\n\n\ny\n \n=\n \nx\n \n+\n \nrandn\n(\n10_000\n)\n\n\n\no\n \n=\n \nash\n(\nx\n,\n \ny\n)\n\n\n\nplot\n(\no\n)\n\n\n\n\n\n\n\n\n\n\nMethods\n\n\nSuppose \no = ash(x)\n, \no2 = ash(x, y)\n\n\n\n\nGet range/density values as a Tuple\n\n\n\n\nxy\n(\no\n)\n  \n# Vector range x, Vector density y\n\n\n\nxyz\n(\no2\n)\n \n# Vector ranges x,y, Matrix density z\n\n\n\n\n\n\n\n\nChange smoothing parameter(s) and/or kernel(s)\n\n\n\n\nash!\n(\no\n;\n \nm\n \n=\n \n2\n,\n \nkernel\n \n=\n \nKernels\n.\nepanechnikov\n)\n\n\n\nash!\n(\no2\n;\n \nmx\n \n=\n \n3\n,\n \nmy\n \n=\n \n1\n,\n \nkernely\n \n=\n \nKernels\n.\nepanechnikov\n)\n\n\n\n\n\n\n\n\nUpdate the estimate by adding more data\n\n\n\n\nfit!\n(\no\n,\n \nx\n)\n\n\n\nfit!\n(\no2\n,\n \nx\n,\n \ny\n)\n\n\n\n\n\n\n\n\nCalculate approximate mean/variance/quantiles\n\n\n\n\nmean\n(\no\n)\n\n\nvar\n(\no\n)\n\n\nstd\n(\no\n)\n\n\nquantile\n(\no\n,\n \n.\n5\n)\n\n\nquantile\n(\no\n.\n \n[\n.\n25\n,\n \n.\n5\n,\n \n.\n75\n])\n\n\nDistributions\n.\npdf\n(\no\n,\n \n.\n4\n)\n\n\nDistributions\n.\ncdf\n(\no\n,\n \n.\n4\n)\n\n\n\nmean\n(\no2\n)\n\n\nvar\n(\no2\n)\n\n\nstd\n(\no2\n)\n\n\n\n\n\n\n\n\nDiagnostics\n\n\n\n\nnout\n(\no\n)\n  \n# number of observations that fell outside the provided range\n\n\nnobs\n(\no\n)\n  \n# number of observations passed to the Ash object", 
            "title": "Home"
        }, 
        {
            "location": "/#averageshiftedhistogramsjl", 
            "text": "An Average Shifted Histogram (ASH) estimator is essentially a kernel density calculated\nwith a fine-partition histogram.", 
            "title": "AverageShiftedHistograms.jl"
        }, 
        {
            "location": "/#univariate-usage", 
            "text": "The main function exported by AverageShiftedHistograms is  ash .  ash ( x ,   rng   =   extendrange ( x );   m   =   5 ,   kernel   =   Kernels . biweight ,   warnout   =   true )    x  Sample for which you want to calculate a density    rng = extendrange(x)  Range of points to calculate the density at (partition of the histogram)  By default, uses  extendrange  to extend the maximum/minimum of  x    m = 5  Smoothing parameter (number of adjacent bins to smooth over)    kernel = Kernels.biweight  Smoothing kernel to use.  Kernels provided by AverageShiftedHistograms are within\na  Kernels  module to help avoid potential name conflicts.    Users can provide their own function to use.  The function should be strictly\n nonnegative, symmetric around 0, but not necessarily integrate to 1  gaussian(u) = exp(-0.5 * u ^ 2)  (already in  Kernels ) is a valid kernel.      warnout = true  print a warning if the estimated density is nonzero outside of  rng", 
            "title": "Univariate Usage"
        }, 
        {
            "location": "/#univariate-toy-example", 
            "text": "using   AverageShiftedHistograms  using   Plots ;   gr ()  y   =   randn ( 100_000 )  o   =   ash ( y ,   - 5 : . 1 : 5 )  plot ( o )    # BEWARE OVERSMOOTHING!  o   =   ash ( y ,   - 5 : . 1 : 5 ,   m   =   20 )  plot ( o )", 
            "title": "Univariate Toy Example"
        }, 
        {
            "location": "/#bivariate-usage", 
            "text": "ash ( x ,   y ;   kw ... )  ash ( x ,   y ,   rngx ,   rngy ;   kw ... )    x ,  y  The bivariate data series (each is an AbstractVector)    rngx ,  rngy  The histogram partition for  x  and  y , respectively    kw...  Keyword arguments are  mx = 5 ,  my = 5  Smoothing parameters for  x  and  y    kernelx = Kernels.biweight ,  kernely = Kernels.biweight  Smoothing kernels for  x  and  y    warnout = true  Print warning if density is nonzero on the edge of  rngx  or  rngy", 
            "title": "Bivariate Usage"
        }, 
        {
            "location": "/#bivariate-toy-example", 
            "text": "using   AverageShiftedHistograms  using   Plots ;   pyplot ()  x   =   randn ( 10_000 )  y   =   x   +   randn ( 10_000 )  o   =   ash ( x ,   y )  plot ( o )", 
            "title": "Bivariate Toy Example"
        }, 
        {
            "location": "/#methods", 
            "text": "Suppose  o = ash(x) ,  o2 = ash(x, y)   Get range/density values as a Tuple   xy ( o )    # Vector range x, Vector density y  xyz ( o2 )   # Vector ranges x,y, Matrix density z    Change smoothing parameter(s) and/or kernel(s)   ash! ( o ;   m   =   2 ,   kernel   =   Kernels . epanechnikov )  ash! ( o2 ;   mx   =   3 ,   my   =   1 ,   kernely   =   Kernels . epanechnikov )    Update the estimate by adding more data   fit! ( o ,   x )  fit! ( o2 ,   x ,   y )    Calculate approximate mean/variance/quantiles   mean ( o )  var ( o )  std ( o )  quantile ( o ,   . 5 )  quantile ( o .   [ . 25 ,   . 5 ,   . 75 ])  Distributions . pdf ( o ,   . 4 )  Distributions . cdf ( o ,   . 4 )  mean ( o2 )  var ( o2 )  std ( o2 )    Diagnostics   nout ( o )    # number of observations that fell outside the provided range  nobs ( o )    # number of observations passed to the Ash object", 
            "title": "Methods"
        }
    ]
}